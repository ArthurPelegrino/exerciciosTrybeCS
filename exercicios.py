import random

# Exerc√≠cio 1
# Dado um array de n√∫meros de tamanho n, escreva um
# algoritmo que retorna true se h√° no array um n√∫mero
# duplicado e false caso contr√°rio. Analise a solu√ß√£o
# abaixo e diga qual √© a ordem de complexidade desse
# algoritmo para o melhor caso, pior caso e caso m√©dio.


def contains_duplicate(numbers):
    numbers.sort()
    previous_number = "not a number"
    for number in numbers:
        if previous_number == number:
            return True
        previous_number = number

    return False


# Resposta: Algoritimo O(n log n)

# üöÄ Exerc√≠cio 2
# Utilize o m√≥dulo random da linguagem Python para gerar um array
# com 100 n√∫meros. Cada um deve ser a m√©dia de n n√∫meros gerados
# aleatoriamente. Qual √© a ordem de complexidade de tempo e de espa√ßo
# deste programa?


def generateNumbers():
    my_range = 100
    number_array = []
    my_total = 0
    x = 0
    while x < my_range:
        random_number = round(random.randrange(1, 1001))
        x += 1
        final_number = random_number / x
        number_array.append(final_number)
        my_total += random_number

    print(number_array)


# Resposta: Complexidade de tempo O(n)
# e de espa√ßo O(1) pois possu√≠mos


generateNumbers()
